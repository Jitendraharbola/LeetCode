Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.

Return the minimum number of substrings in such a partition.

Note that each character should belong to exactly one substring in a partition.

 

Example 1:

Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.

Solution:-
class Solution {
    public int partitionString(String s) {
      int count = 1;
      Set<Character> set = new HashSet<>();
      for(char c : s.toCharArray()){
        if(set.contains(c)){
            count++;
            set = new HashSet();
         }
         set.add(c);
      }
      return count;

    }
}
